@model dynamic

@{
    ViewBag.Title = "New Renta; Form";
}

<h2>New Rental</h2>

<form id ="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" data-rule-validMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-md-6 col-sm-6">
            <ul id="movies-list" class="list-group"></ul>
        </div>
    </div>
   <button id="submitNewRentalButton" disabled class="btn btn-primary mt-3">Submit</button>
</form>

@section scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {

            var vm = {
                moviesIds:[]
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead(
                {
                    minLength:3,
                    highlight: true
                }, 
                {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }
            ).on("typeahead:select", (e, customer) => {
                vm.customerId = customer.id;
                updateButtonDisabledState();
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies-list").append("<li class='list-group-item'>" + movie.name + "</li>");

                $("#movie").typeahead("val", "");

                vm.moviesIds.push(movie.id);
                updateButtonDisabledState();
            });

            $.validator.addMethod("validCustomer", () => vm.customerId && vm.customerId != 0, "Please select a valid customer");
            $.validator.addMethod("validMovie", () => vm.moviesIds.length > 0, "Please select at least one valid movie");


            $("#newRental").validate({
                submitHandler: (e) => {
                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        contentType: "application/json",
                        data: JSON.stringify(vm),
                    })
                    .done(() => {
                        toastr.success("Rentals successfullt recorded");

                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies-list").empty();

                        vm = { movieIds: [] };

                        validator.resetForm();
                    })
                    .fail(() => {
                       toastr.error("Oops. Something unexpected happened");
                    });
                    return false;
                }
            });

            function updateButtonDisabledState() {
                var submitNewRentalButton = document.getElementById('submitNewRentalButton'); // Get the button element

                if (vm.customerId && vm.customerId > 0 && vm.moviesIds.length > 0) {
                    submitNewRentalButton.disabled = false;
                } else {
                    submitNewRentalButton.disabled = true;
                }
            }
        });
        
    </script>

}